// Copyright (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

export default {
  headerTitle: "Edge Craft RAG based Q&A Chatbot",
  common: {
    update: "Update",
    edit: "Edit",
    add: "Add",
    delete: "Delete",
    active: "Activate",
    deactivate: "Deactivate",
    cancel: "Cancel",
    confirm: "Confirm",
    save: "Save",
    back: "Back",
    next: "Next",
    submit: "Submit",
    prompt: "Prompt",
    import: "Import",
    chatbot: "Chatbot",
    jump: "Go to chatbot",
    success: "Success",
    error: "Error",
    clear: "Clear",
    uploadTip: "Click or drag file to this area to upload",
  },
  system: {
    title: "System Status",
    cpu: "CPU Usage",
    gpu: "GPU Usage",
    disk: "Disk Usage",
    memory: "Memory Usage",
    used: "Used",
    notUsed: "Not Used",
    info: "System Information",
    kernel: "Kernel",
    processor: "KerProcessornel",
    os: "OS",
    time: "Current time",
  },
  quickStart: {
    title: "Quick Start",
    first: "Step 1",
    second: "Step 2",
    step1: "Create Pipeline",
    step1Tip:
      "Build your RAG pipeline with customized settings to maximize the potential of AI information processing capability.",
    step2: "Use the Chatbot",
    step2Tip:
      "Start engaging with the intelligent chatbot, which supports file uploads and information retrieval to assist you in completing tasks more efficiently.",
    create: "Go Create",
  },
  pipeline: {
    pipelines: "Pipelines",
    create: "Create Pipeline",
    edit: "Edit Pipeline",
    detail: "Pipeline Details",
    import: "Import Pipeline",
    activated: "Activated",
    inactive: "Inactive",
    isActive: "Activated",
    pipelineFormatTip: "Supports JSON format, with file size not exceeding 10M.",
    importSuccTip: "Files upload successful!",
    importErrTip: "Files upload failed!",
    name: "Name",
    id: "ID",
    status: "Status",
    operation: "Operation",
    deactivateTip: "Are you sure deactivate this pipeline?",
    activeTip: "Are you sure activate this pipeline?",
    deleteTip: "Are you sure delete this pipeline?",
    notActivatedTip: "There is no available pipeline. Please create or activate it first.",
    validErr: "Form validation failed !",
    config: {
      basic: "Basic",
      nodeParser: "Node Parser",
      nodeParserType: "Node parser type",
      chunkSize: "Chunk size",
      chunkOverlap: "Chunk overlap",
      windowSize: "Window Size",
      indexer: "Indexer",
      indexerType: "Indexer Type",
      embedding: "Embedding Model",
      embeddingDevice: "Embedding run device",
      retriever: "Retriever",
      retrieverType: "Retriever Type",
      topk: "Search top k",
      postProcessor: "PostProcessor",
      postProcessorType: "PostProcessor Type",
      rerank: "Rerank Model",
      rerankDevice: "Rerank run device",
      generator: "Generator",
      generatorType: "Generator Type",
      llm: "LLM Inference Type",
      language: "Large Language Model",
      llmDevice: "LLM run device",
      weights: "Weights",
      local: "Local",
      vllm: "Vllm",
    },
    valid: {
      nameValid1: "Please input name",
      nameValid2: "Name should be between 2 and 30 characters",
      nodeParserType: "Please select Node Parser Type",
      chunkSizeValid1: "Please select Chunk Size",
      chunkSizeValid2: "The value of Chunk Size cannot be less than Chunk Overlap",
      chunkOverlapValid1: "Please select Chunk Overlap",
      chunkOverlapValid2: "The value of Chunk Overlap cannot be greater than Chunk Size",
      windowSize: "Please select Chunk Window Size",
      indexerType: "Please select Indexer Type",
      embedding: "Please select Embedding Model",
      embeddingDevice: "Please select Embedding run device",
      retrieverType: "Please select Retriever Type",
      topk: "Please select Top k",
      postProcessorType: "Please select PostProcessor Type",
      rerank: "Please select Rerank Model",
      rerankDevice: "Please select Rerank run device",
      generatorType: "please select Generator Type",
      language: "please select Large Language Model",
      llmDevice: "please select LLM run device",
      weights: "please select Weights",
    },
    desc: {
      name: "The name identifier of the pipeline",
      nodeParserType: "Node parsing type when you use RAG",
      chunkSize: "Size of each chunk for processing",
      chunkOverlap: "Overlap size between chunks",
      windowSize: "The number of sentences on each side of a sentence to capture",
      indexerType: "The type of index structure responsible for building based on the parsed nodes",
      embedding: "Embed the text data to represent it and build a vector index",
      embeddingDevice: "The device used by the Embedding Model",
      retrieverType:
        "The retrieval type used when retrieving relevant nodes from the index according to the user's query",
      topk: "The number of top k results to return",
      postProcessorType: "Select postprocessors for post-processing of the context",
      rerank: "Rerank Model",
      rerankDevice: "Rerank run device",
      generatorType: "Local inference generator or vllm generator",
      language: "The large model used for generating dialogues",
      llmDevice: "The device used by the  LLM",
      weights: "Model weight",
      reranker: "The model for reranking.",
      metadataReplace: "Used to replace the node content with a field from the node metadata.",
      vectorsimilarity: "retrieval according to vector similarity",
      autoMerge: "This retriever will try to merge context into parent context.",
      bm25: "A BM25 retriever that uses the BM25 algorithm to retrieve nodes.",
      faissVector: "Embeddings are stored within a Faiss index.",
      vector: "Vector Store Index.",
      simple: "Parse text with a preference for complete sentences.",
      hierarchical: "Splits a document into a recursive hierarchy Nodes using a NodeParser.",
      sentencewindow:
        "Sentence window node parser. Splits a document into Nodes, with each node being a sentence. Each node contains a window from the surrounding sentences in the metadata.",
      unstructured: "UnstructedNodeParser is a component that processes unstructured data.",
    },
  },
  generation: {
    title: "Generation Configuration",
    retriever: "Retriever Configuration",
    config: {
      top_n: "Rerank top n",
      temperature: "Temperature",
      top_p: "Top-p (nucleus sampling)",
      top_k: "Top-k",
      penalty: "Repetition Penalty",
      maxToken: "Max Token Number",
    },
    desc: {
      top_n: "Number of rerank results",
      temperature: "Higher values produce more diverse outputs",
      top_p:
        "Sample from the smallest possible set of tokens whose cumulative probability exceeds top_p. Set to 1 to disable and sample from all tokens.",
      top_k: `Sample from a shortlist of top-k tokens — 0 to
            disable and sample from all tokens.`,
      penalty: "Penalize repetition — 1.0 to disable.",
      maxToken: "Set Max Output Token.",
    },
  },
  chat: {
    title: "Chat",
    tip1: "Hi, I'm EC RAG ",
    tip2: "How can I help you today?",
    tip3: "Choosing the right knowledge base can help AI answer questions more accurately",
    tip4: "Please enter your question...",
    new: "New Chat",
    rag: "EC RAG",
    setting: "Pipeline Setting",
    clear: "Clear Message",
  },
  knowledge: {
    title: "Knowledge Base",
    total: "Total files: ",
    upload: "Upload File",
    create: "Create Knowledge Base",
    edit: "Edit Knowledge Base",
    deleteTip: "Are you sure delete this knowledge base?",
    activeTip: "Are you sure activate this knowledge base?",
    uploadTip: "Supports PDF, Word, TXT,Doc,Html,PPT formats, with a single file size not exceeding 200M",
    notFileTip: "The knowledge base is empty. Go upload your files.",
    name: "Name",
    des: "Description",
    activated: "Activated",
    nameValid1: "Please input knowledge base name",
    nameValid2: "Name should be between 2 and 30 characters",
    desValid: "Please input knowledge base description",
    activeValid: "Please select whether to activate",
    uploadValid: "Single file size not exceeding 50M.",
    deleteFileTip: "Are you sure delete this file?",
  },
  request: {
    pipeline: {
      createSucc: "Pipeline created successfully !",
      updateSucc: "Pipeline update successfully !",
      deleteSucc: "Pipeline deleted successfully !",
      switchSucc: "Pipeline state switch successful !",
    },
    chatbot: {
      updateSucc: "Configuration update successful !",
    },
    knowledge: {
      uploadSucc: "Document uploaded and parsed successfully !",
      deleteFileSucc: "File deleted successfully !",
      createSucc: "Knowledge Base created successfully !",
      updateSucc: "Knowledge Base update successfully !",
      deleteSucc: "Knowledge Base deleted successfully !",
    },
  },
  error: {
    notFoundTip: "Uh oh! It seems like you're lost",
    back: "Go Home",
  },
};
