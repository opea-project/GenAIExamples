version: '3.8'

services:
  # ==========================================
  # FRONTEND - Next.js Application
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: opea-ims-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://backend:8000
    depends_on:
      - backend
    networks:
      - opea-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # BACKEND - FastAPI Application
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: opea-ims-backend
    ports:
      - "8000:8000"
    environment:
      # OPEA Service URLs
      - OPEA_EMBEDDING_URL=http://embedding-service:6000
      - OPEA_LLM_URL=http://llm-service:9000
      - OPEA_RETRIEVAL_URL=http://retrieval-service:7000
      - OPEA_GATEWAY_URL=http://opea-gateway:8888

      # Database
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/opea_ims
      - REDIS_URL=redis://redis:6379

      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-in-production-use-openssl-rand-hex-32}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30

      # Application
      - CSV_DATA_DIR=/app/data
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000

      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=60
    volumes:
      - ./data:/app/data:ro
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      embedding-service:
        condition: service_started
      llm-service:
        condition: service_started
    networks:
      - opea-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # ==========================================
  # OPEA MICROSERVICES
  # ==========================================

  # Embedding Service (Text Vectorization)
  # Optimized for Intel Xeon processors
  embedding-service:
    image: opea/embedding-tei:latest
    container_name: opea-embedding
    ports:
      - "6000:6000"
    environment:
      - MODEL_ID=BAAI/bge-base-en-v1.5
      - PORT=6000
      - MAX_BATCH_TOKENS=16384
      - MAX_CONCURRENT_REQUESTS=128
      # Intel Xeon optimizations
      - OMP_NUM_THREADS=4
      - KMP_AFFINITY=granularity=fine,compact,1,0
      - KMP_BLOCKTIME=1
    networks:
      - opea-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Retrieval Service (Vector Search)
  retrieval-service:
    image: opea/retriever-redis:latest
    container_name: opea-retrieval
    ports:
      - "7000:7000"
    environment:
      - REDIS_URL=redis://redis:6379
      - INDEX_NAME=opea_ims_vectors
      - EMBEDDING_ENDPOINT=http://embedding-service:6000
      - PORT=7000
    depends_on:
      redis:
        condition: service_healthy
      embedding-service:
        condition: service_started
    networks:
      - opea-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # LLM Service (Text Generation)
  # Intel neural-chat model optimized for Intel Xeon
  llm-service:
    image: opea/llm-tgi:latest
    container_name: opea-llm
    ports:
      - "9000:9000"
    environment:
      - MODEL_ID=Intel/neural-chat-7b-v3-3
      - PORT=9000
      - MAX_INPUT_LENGTH=2048
      - MAX_TOTAL_TOKENS=4096
      - HUGGING_FACE_HUB_TOKEN=${HF_TOKEN:-}
      # Intel Xeon optimizations
      - OMP_NUM_THREADS=8
      - KMP_AFFINITY=granularity=fine,compact,1,0
      - KMP_BLOCKTIME=1
      - MALLOC_CONF=oversize_threshold:1,background_thread:true,metadata_thp:auto
    networks:
      - opea-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          cpus: '4'
          memory: 8G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 300s

  # ChatQnA Gateway (OPEA Megaservice)
  opea-gateway:
    image: opea/chatqna:latest
    container_name: opea-gateway
    ports:
      - "8888:8888"
    environment:
      - EMBEDDING_SERVICE_HOST=embedding-service
      - EMBEDDING_SERVICE_PORT=6000
      - RETRIEVER_SERVICE_HOST=retrieval-service
      - RETRIEVER_SERVICE_PORT=7000
      - LLM_SERVICE_HOST=llm-service
      - LLM_SERVICE_PORT=9000
      - MEGA_SERVICE_PORT=8888
    depends_on:
      - embedding-service
      - retrieval-service
      - llm-service
    networks:
      - opea-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # DATA LAYER
  # ==========================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: opea-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=opea_ims
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/app/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - opea-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis (Vector Store & Cache)
  redis:
    image: redis/redis-stack:latest
    container_name: opea-redis
    ports:
      - "6379:6379"
      - "8001:8001"  # RedisInsight
    environment:
      - REDIS_ARGS=--maxmemory 4gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - opea-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # ==========================================
  # MONITORING & OBSERVABILITY (Optional)
  # ==========================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: opea-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - opea-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: opea-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - opea-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: opea-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - opea-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  opea-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

