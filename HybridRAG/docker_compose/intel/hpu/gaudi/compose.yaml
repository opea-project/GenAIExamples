# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

services:
  text2cypher-gaudi:
    image: ${REGISTRY:-opea}/text2cypher-gaudi:${TAG:-latest}
    container_name: text2cypher-gaudi-container
    ports:
      - "11801:9097"
    depends_on:
      neo4j-apoc:
        condition: service_healthy
    ipc: host
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      INDEX_NAME: ${INDEX_NAME}
      HUGGINGFACEHUB_API_TOKEN: ${HF_TOKEN}
      HF_TOKEN: ${HF_TOKEN}
      LOGFLAG: ${LOGFLAG:-False}
      HABANA_VISIBLE_DEVICES: all
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      TOKENIZERS_PARALLELISM: False
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_URL: ${NEO4J_URI}
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      host_ip: ${host_ip}
    runtime: habana
    cap_add:
      - SYS_NICE
    restart: unless-stopped
  neo4j-apoc:
    image: neo4j:latest
    container_name: neo4j-apoc
    ports:
      - "${NEO4J_PORT1:-7474}:7474"
      - "${NEO4J_PORT2:-7687}:7687"
    volumes:
        - ./data/neo4j/logs:/logs
        - ./data/neo4j/config:/config
        - ./data/neo4j/data:/data
        - ./data/neo4j/plugins:/plugins
    ipc: host
    environment:
      - no_proxy=${no_proxy}
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.\*
      - NEO4J_server_bolt_advertised__address=localhost:${NEO4J_PORT2}
    restart: always
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 3s
  redis-vector-db:
    image: redis/redis-stack:7.2.0-v9
    container_name: redis-vector-db
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
  dataprep-redis-service:
    image: ${REGISTRY:-opea}/dataprep:${TAG:-latest}
    container_name: dataprep-redis-server
    depends_on:
      redis-vector-db:
        condition: service_healthy
      tei-embedding-service:
        condition: service_started
    ports:
      - "6007:5000"
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      REDIS_URL: redis://redis-vector-db:6379
      REDIS_HOST: redis-vector-db
      INDEX_NAME: ${INDEX_NAME}
      TEI_ENDPOINT: http://tei-embedding-service:80
      HUGGINGFACEHUB_API_TOKEN: ${HF_TOKEN}
  tei-embedding-service:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.6
    container_name: tei-embedding-server
    ports:
      - "6006:80"
    volumes:
      - "${MODEL_CACHE:-./data}:/data"
    shm_size: 1g
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
    command: --model-id ${EMBEDDING_MODEL_ID} --auto-truncate
  retriever:
    image: ${REGISTRY:-opea}/retriever:${TAG:-latest}
    container_name: retriever-redis-server
    depends_on:
      - redis-vector-db
    ports:
      - "7000:7000"
    ipc: host
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      REDIS_URL: redis://redis-vector-db:6379
      REDIS_HOST: redis-vector-db
      INDEX_NAME: ${INDEX_NAME}
      TEI_EMBEDDING_ENDPOINT: http://tei-embedding-service:80
      HUGGINGFACEHUB_API_TOKEN: ${HF_TOKEN}
      LOGFLAG: ${LOGFLAG}
      RETRIEVER_COMPONENT_NAME: "OPEA_RETRIEVER_REDIS"
    restart: unless-stopped
  tei-reranking-service:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.6
    container_name: tei-reranking-server
    ports:
      - "8808:80"
    volumes:
      - "${MODEL_CACHE:-./data}:/data"
    shm_size: 1g
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      HUGGINGFACEHUB_API_TOKEN: ${HF_TOKEN}
      HF_HUB_DISABLE_PROGRESS_BARS: 1
      HF_HUB_ENABLE_HF_TRANSFER: 0
    command: --model-id ${RERANK_MODEL_ID} --auto-truncate
  vllm-service:
    image: ${REGISTRY:-opea}/vllm:${TAG:-latest}
    container_name: vllm-service
    ports:
      - "9009:80"
    volumes:
      - "${MODEL_CACHE:-./data}:/root/.cache/huggingface/hub"
    shm_size: 128g
    environment:
      no_proxy: ${no_proxy}
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      HF_TOKEN: ${HF_TOKEN}
      LLM_MODEL_ID: ${LLM_MODEL_ID}
      VLLM_TORCH_PROFILER_DIR: "/mnt"
      VLLM_CPU_KVCACHE_SPACE: 40
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://$host_ip:9009/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 100
    command: --model $LLM_MODEL_ID --host 0.0.0.0 --port 80
  hybridrag-xeon-backend-server:
    image: ${REGISTRY:-opea}/hybridrag:${TAG:-latest}
    container_name: hybridrag-xeon-backend-server
    depends_on:
      - redis-vector-db
      - retriever
      - tei-reranking-service
      - vllm-service
      - neo4j-apoc
      - text2cypher-gaudi
      - tei-embedding-service
      #- struct2graph
    ports:
      - "8888:8888"
    environment:
      - no_proxy=${no_proxy}
      - https_proxy=${https_proxy}
      - http_proxy=${http_proxy}
      - MEGA_SERVICE_HOST_IP=${MEGA_SERVICE_HOST_IP}
      - EMBEDDING_SERVER_HOST_IP=${EMBEDDING_SERVER_HOST_IP}
      - EMBEDDING_SERVER_PORT=${EMBEDDING_SERVER_PORT}
      - RETRIEVER_SERVER_HOST_IP=${RETRIEVER_SERVER_HOST_IP}
      - RETRIEVER_SERVER_PORT=${RETRIEVER_SERVER_PORT}
      - RERANK_SERVER_HOST_IP=${RERANK_SERVER_HOST_IP}
      - RERANK_SERVER_PORT=${RERANK_SERVER_PORT}
      - LLM_SERVER_HOST_IP=${LLM_SERVER_HOST_IP}
      - LLM_SERVER_PORT=${LLM_SERVER_PORT}
      - TEXT2CYPHER_SERVER_HOST_IP=${TEXT2CYPHER_SERVER_HOST_IP}
      - TEXT2CYPHER_SERVER_PORT=${TEXT2CYPHER_SERVER_PORT:-9097}
      - LLM_MODEL=${LLM_MODEL_ID}
      - LOGFLAG=${LOGFLAG}
      - NEO4J_URL=${NEO4J_URL}
      - NEO4J_server_directories_import=import
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_allow__csv__import__from__file__urls=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    ipc: host
    restart: always
  hybridrag-xeon-ui-server:
    image: ${REGISTRY:-opea}/hybridrag-ui:${TAG:-latest}
    container_name: hybridrag-xeon-ui-server
    depends_on:
      - hybridrag-xeon-backend-server
    ports:
      - "5173:5173"
    environment:
      - no_proxy=${no_proxy}
      - https_proxy=${https_proxy}
      - http_proxy=${http_proxy}
    ipc: host
    restart: always
  hybridrag-xeon-nginx-server:
    image: ${REGISTRY:-opea}/nginx:${TAG:-latest}
    container_name: hybridrag-xeon-nginx-server
    depends_on:
      - hybridrag-xeon-backend-server
      - hybridrag-xeon-ui-server
    ports:
      - "${NGINX_PORT:-80}:80"
    environment:
      - no_proxy=${no_proxy}
      - https_proxy=${https_proxy}
      - http_proxy=${http_proxy}
      - FRONTEND_SERVICE_IP=hybridrag-xeon-ui-server
      - FRONTEND_SERVICE_PORT=5173
      - BACKEND_SERVICE_NAME=hybridrag
      - BACKEND_SERVICE_IP=hybridrag-xeon-backend-server
      - BACKEND_SERVICE_PORT=8888
      - DATAPREP_SERVICE_IP=dataprep-redis-service
      - DATAPREP_SERVICE_PORT=5000
    ipc: host
    restart: always

networks:
  default:
    driver: bridge
