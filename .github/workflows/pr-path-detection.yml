# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Check for missing Dockerfile paths in repo comps

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, ready_for_review, synchronize]

jobs:
  check-dockerfile-paths:
    runs-on: ubuntu-latest

    steps:
      - name: Clean Up Working Directory
        run: sudo rm -rf ${{github.workspace}}/*

      - name: Checkout repo GenAIExamples
        uses: actions/checkout@v4

      - name: Clone repo GenAIComps
        run: |
          cd ..
          git clone https://github.com/opea-project/GenAIComps.git

      - name: Check for missing Dockerfile paths in GenAIComps
        run: |
          cd ${{github.workspace}}
          miss="FALSE"
          while IFS=: read -r file line content; do
              dockerfile_path=$(echo "$content" | awk -F '-f ' '{print $2}' | awk '{print $1}')
              if [[ ! -f "../GenAIComps/${dockerfile_path}" ]]; then
                  miss="TRUE"
                  echo "Missing Dockerfile: GenAIComps/${dockerfile_path} (Referenced in GenAIExamples/${file}:${line})"
              fi
          done < <(grep -Ern 'docker build .* -f comps/.+/Dockerfile' --include='*.md' .)


          if [[ "$miss" == "TRUE" ]]; then
            exit 1
          fi

        shell: bash

  Check-the-validity-of-hyperlinks:
    runs-on: ubuntu-latest
    steps:
      - name: Clean Up Working Directory
        run: sudo rm -rf ${{github.workspace}}/*

      - name: Checkout repo GenAIExamples
        uses: actions/checkout@v4

      - name: Check the validity of hyperlinks
        run: |
          cd ${{github.workspace}}
          fail="FALSE"
          url_lines=$(grep -Eo '\]\(http[s]?://[^)]+\)' -r ./*/*.md)
          if [ -n "$url_lines" ]; then
            for url_line in $url_lines; do
              url=$(echo "$url_line"|cut -d '(' -f2 | cut -d ')' -f1)
              path=$(echo "$url_line"|cut -d '.' -f1 |cut -d ':' -f1)
              response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              if [ "$response" -eq 200 ]; then
                echo "Valid link: $url"
              else
                echo "**********Validation failed, try again**********"
                response_retry=$(curl -s -o /dev/null -w "%{http_code}" "$url")
                if [ "$response_retry" -eq 200 ]; then
                  echo "Valid link: $url"
                else
                  echo "Invalid link from ${{github.workspace}}$path: $url"
                  fail="TRUE"
                fi
              fi
            done
          fi

          if [[ "$fail" == "TRUE" ]]; then
            exit 1
          fi
        shell: bash
