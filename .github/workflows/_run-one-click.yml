# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: One Click test on call

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      registry:
        description: Container Registry URL
        required: false
        default: ""
        type: string
      tag:
        description: Container Tag
        required: false
        default: "latest"
        type: string
      example:
        description: Example to test
        required: true
        type: string
      test_compose:
        default: true
        description: 'Test examples with docker compose'
        required: false
        type: boolean
      test_helmchart:
        default: true
        description: 'Test examples with helm charts'
        required: false
        type: boolean
      hardware:
        description: Hardware to run the test on
        required: true
        type: string
      opea_branch:
        default: "main"
        required: false
        type: string
jobs:
  get-example-id:
    runs-on: ubuntu-latest
    outputs:
      example_id: ${{ steps.get-example-id.outputs.example_id }}
    steps:
      - name: Get example id
        id: get-example-id
        run: |
          case "${{ inputs.example }}" in
            ChatQnA) echo "example_id=1" >> $GITHUB_OUTPUT ;;
            CodeTrans) echo "example_id=2" >> $GITHUB_OUTPUT ;;
            DocSum) echo "example_id=3" >> $GITHUB_OUTPUT ;;
            CodeGen) echo "example_id=4" >> $GITHUB_OUTPUT ;;
            AudioQnA) echo "example_id=5" >> $GITHUB_OUTPUT ;;
            VisualQnA) echo "example_id=6" >> $GITHUB_OUTPUT ;;
            FaqGen) echo "example_id=7" >> $GITHUB_OUTPUT ;;
            AgentQnA) echo "example_id=8" >> $GITHUB_OUTPUT ;;
            *) echo "example_id=0" >> $GITHUB_OUTPUT ;;
          esac

  docker-test:
    if: ${{ inputs.test_compose || inputs.tag == 'ci' }}
    needs: [get-example-id]
    runs-on: ${{ inputs.hardware }}
    continue-on-error: true
    steps:
      - name: Clean up Working Directory
        run: |
          sudo rm -rf ${{github.workspace}}/* || true

          echo "Cleaning up containers using ports..."
          cid=$(docker ps --format '{{.Names}} : {{.Ports}}' | grep -v ' : $' | grep -v 0.0.0.0:5000 | awk -F' : ' '{print $1}')
          if [[ ! -z "$cid" ]]; then docker stop $cid && docker rm $cid && sleep 1s; fi
          docker system prune -f

          echo "Cleaning up images ..."
          docker images --filter reference="*/*/*:latest" -q | xargs -r docker rmi && sleep 1s
          docker images --filter reference="*/*:ci" -q | xargs -r docker rmi && sleep 1s
          docker images --filter reference="*:5000/*/*" -q | xargs -r docker rmi && sleep 1s
          docker images --filter reference="opea/comps-base" -q | xargs -r docker rmi && sleep 1s
          docker images

      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-test-case.outputs.CHECKOUT_REF }}
          fetch-depth: 0

      - name: Clean up container before test
        shell: bash
        run: |
          docker ps
          cd ${{ github.workspace }}/${{ inputs.example }}
          export test_case=${{ matrix.test_case }}
          export hardware=${{ inputs.hardware }}
          bash ${{ github.workspace }}/.github/workflows/scripts/docker_compose_clean_up.sh "containers"
          bash ${{ github.workspace }}/.github/workflows/scripts/docker_compose_clean_up.sh "ports"
          docker ps

      - name: Log in DockerHub
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: deploy docker and test
        shell: bash
        env:
          HUGGINGFACEHUB_API_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          PINECONE_KEY: ${{ secrets.PINECONE_KEY }}
          PINECONE_KEY_LANGCHAIN_TEST: ${{ secrets.PINECONE_KEY_LANGCHAIN_TEST }}
          SDK_BASE_URL: ${{ secrets.SDK_BASE_URL }}
          SERVING_TOKEN: ${{ secrets.SERVING_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
          FINANCIAL_DATASETS_API_KEY: ${{ secrets.FINANCIAL_DATASETS_API_KEY }}
          IMAGE_REPO: ${{ inputs.registry }}
          IMAGE_TAG: ${{ inputs.tag }}
          opea_branch: ${{ inputs.opea_branch }}
          example: ${{ inputs.example }}
          hardware: gaudi
          test_case: ${{ matrix.test_case }}
          use_model_cache: ${{ inputs.use_model_cache }}
        run: |
          cd ${{ github.workspace }}/one_click_deploy
          python3 -m pip install -r requirements.txt
          
          if [ "${{ needs.get-example-id.outputs.example_id }}" -eq 1 ]; then
            empty_lines="7"
          else
            empty_lines="4"
          fi
          python3 one_click_deploy.py << INPUTS
          ${{ needs.get-example-id.outputs.example_id }}
          1
          docker
          $hardware
          $HF_TOKEN
          for i in $(seq 1 $empty_lines); do echo -e ""; done
          N
          y
          Y
          N
          y
          Y
          INPUTS

      - name: Clean up deployment
        run: |
          cd ${{ github.workspace }}/one_click_deploy

          python3 one_click_deploy.py << INPUTS
          ${{ needs.get-example-id.outputs.example_id }}
          2
          docker
          $hardware
          Y
          INPUTS

      - name: Publish docker pipeline artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker
          path: ${{ github.workspace }}/docker-tests/*.log


  k8s-test:
    if: ${{ inputs.test_helmchart || inputs.tag == 'ci' }}
    needs: [get-example-id] 
    runs-on: k8s-${{ inputs.hardware }}
    continue-on-error: true
    steps:
      - name: Clean Up Working Directory
        run: |
          echo "value_file=${{ matrix.value_file }}"
          sudo rm -rf ${{github.workspace}}/*

      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-test-case.outputs.CHECKOUT_REF }}
          fetch-depth: 0

      - name: deploy k8s and test
        shell: bash
        env:
          HUGGINGFACEHUB_API_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          PINECONE_KEY: ${{ secrets.PINECONE_KEY }}
          PINECONE_KEY_LANGCHAIN_TEST: ${{ secrets.PINECONE_KEY_LANGCHAIN_TEST }}
          SDK_BASE_URL: ${{ secrets.SDK_BASE_URL }}
          SERVING_TOKEN: ${{ secrets.SERVING_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
          FINANCIAL_DATASETS_API_KEY: ${{ secrets.FINANCIAL_DATASETS_API_KEY }}
          IMAGE_REPO: ${{ inputs.registry }}
          IMAGE_TAG: ${{ inputs.tag }}
          opea_branch: ${{ inputs.opea_branch }}
          example: ${{ inputs.example }}
          hardware: gaudi
          test_case: ${{ matrix.test_case }}
          use_model_cache: ${{ inputs.use_model_cache }}
        run: |
          cd ${{ github.workspace }}/one_click_deploy
          python3 -m pip install -r requirements.txt
          if [ "${{ needs.get-example-id.outputs.example_id }}" -eq 1 ]; then
            empty_lines="6"
          else
            empty_lines="4"
          fi
          python3 one_click_deploy.py << INPUTS
          ${{ needs.get-example-id.outputs.example_id }}
          1
          k8s
          $hardware
          $HF_TOKEN
          for i in $(seq 1 $empty_lines); do echo -e ""; done
          N
          y
          Y
          y
          N
          100.83.111.254:5000
          y

          Y
          INPUTS

      - name: Clean up deployment
        run: |
          cd ${{ github.workspace }}/one_click_deploy
          python3 one_click_deploy.py << INPUTS
          ${{ needs.get-example-id.outputs.example_id }}
          2
          k8s
          y
          Y
          INPUTS

      - name: Publish pipeline artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: k8s
          path: ${{ github.workspace }}/k8s-tests/*.log