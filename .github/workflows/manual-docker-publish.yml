# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Examples publish docker image on manual event
on:
  workflow_dispatch:
    inputs:
      node:
        default: "gaudi"
        description: "Hardware to run test"
        required: true
        type: string
      examples:
        default: "Translation"
        description: 'List of examples to test [AudioQnA,ChatQnA,CodeGen,CodeTrans,DocSum,FaqGen,SearchQnA,Translation]'
        required: true
        type: string
      gmc:
        default: false
        description: 'Publish gmc images'
        required: false
        type: boolean
      tag:
        default: "v0.9"
        description: "Tag to publish"
        required: true
        type: string
      publish_tags:
        default: "latest,v0.9"
        description: 'Tag list apply to publish images'
        required: false
        type: string

permissions: read-all
jobs:
  get-image-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.scan-matrix.outputs.matrix }}
    steps:
      - name: Checkout out Repo
        uses: actions/checkout@v4

      - name: Set Matrix
        id: scan-matrix
        run: |
          pip install yq
          examples=($(echo ${{ inputs.examples }} | tr ',' ' '))
          image_list=[]
          for example in ${examples[@]}
          do
              echo ${example}
              images=$(cat ${{ github.workspace }}/${example}/docker/docker_build_compose.yaml | yq -r '.[]' | jq 'keys' | jq -c '.')
              image_list=$(echo ${image_list} | jq -s '.[0] + .[1] | unique' - <(echo ${images}))
          done

          if [ "${{ inputs.gmc }}" == "true" ]; then
              image_list=$(echo ${image_list} | jq -c '. + ["gmcmanager","gmcrouter"]')
          fi
          echo $image_list
          echo "matrix=$(echo ${image_list} | jq -c '.')" >> $GITHUB_OUTPUT

  publish:
    needs: [get-image-list]
    strategy:
      matrix:
        image: ${{ fromJSON(needs.get-image-list.outputs.matrix) }}
    runs-on: "docker-build-${{ inputs.node }}"
    steps:
      - uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Image Publish
        uses: opea-project/validation/actions/image-publish@main
        with:
          local_image_ref: ${OPEA_IMAGE_REPO}opea/${{ matrix.image }}:${{ inputs.tag }}
          image_name: opea/${{ matrix.image }}
          publish_tags: ${{ inputs.publish_tags }}
