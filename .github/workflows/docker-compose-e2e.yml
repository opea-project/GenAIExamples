# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: E2E test with docker compose

on:
  pull_request_target:
    branches: [main]
    types: [opened, reopened, ready_for_review, synchronize] # added `ready_for_review` since draft is skipped
    paths:
      - "**/docker/**"
      - "**/tests/**"
      - "**/ui/**"
      - "!**.md"
      - "!**.txt"
      - .github/workflows/docker-compose-e2e.yml
  workflow_dispatch:

# If there is a new commit, the previous jobs will be canceled
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  job1:
    uses: ./.github/workflows/reuse-get-test-matrix.yml
    with:
      diff_excluded_files: '.github|README.md|*.txt|deprecate|kubernetes|manifest|assets'

  mega-image-build:
    needs: job1
    strategy:
      matrix: ${{ fromJSON(needs.job1.outputs.run_matrix) }}
    uses: ./.github/workflows/reuse-image-build.yml
    with:
      image_tag: ${{ github.event.pull_request.head.sha }}
      mega_service: "${{ matrix.example }}"
      runner_label: "docker-build-${{ matrix.hardware }}"

  Example-test:
    needs: [job1, mega-image-build]
    strategy:
      matrix: ${{ fromJSON(needs.job1.outputs.run_matrix) }}
    runs-on: ${{ matrix.hardware }}
    continue-on-error: true
    steps:
      - name: Test example
        run: |
          echo "Matrix - example ${{ matrix.example }}, hardware ${{ matrix.hardware }}"

      - name: Clean Up Working Directory
        run: sudo rm -rf ${{github.workspace}}/*

      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"

      - name: Run test
        env:
          HUGGINGFACEHUB_API_TOKEN: ${{ secrets.HUGGINGFACEHUB_API_TOKEN }}
          example: ${{ matrix.example }}
          hardware: ${{ matrix.hardware }}
          IMAGE_REPO: ${{needs.mega-image-build.outputs.image_repo}}
          IMAGE_TAG: ${{needs.mega-image-build.outputs.image_tag}}
        run: |
          cd ${{ github.workspace }}/$example/tests
          example_l=$(echo $example | tr '[:upper:]' '[:lower:]')
          if [ -f test_${example_l}_on_${hardware}.sh ]; then timeout 30m bash test_${example_l}_on_${hardware}.sh; else echo "Test script not found, skip test!"; fi

      - name: Clean up container
        env:
          example: ${{ matrix.example }}
          hardware: ${{ matrix.hardware }}
        if: cancelled() || failure()
        run: |
          cd ${{ github.workspace }}/$example/docker/$hardware
          container_list=$(cat docker_compose.yaml | grep container_name | cut -d':' -f2)
          for container_name in $container_list; do
              cid=$(docker ps -aq --filter "name=$container_name")
              if [[ ! -z "$cid" ]]; then docker stop $cid && docker rm $cid && sleep 1s; fi
          done
          echo y | docker system prune

      - name: Publish pipeline artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.example }}-${{ matrix.hardware }}
          path: ${{ github.workspace }}/${{ matrix.example }}/tests/*.log
