# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: E2E test with manifests

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, ready_for_review, synchronize] # added `ready_for_review` since draft is skipped
    paths:
      - "**/kubernetes/manifests/**"
      - "**/tests/test_manifest**"
      - "!**.md"
      - "!**.txt"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  job1:
    uses: ./.github/workflows/reuse-get-test-matrix.yml
    with:
      diff_excluded_files: '.github|deprecated|docker|assets|*.md|*.txt'
      xeon_server_label: 'k8s'
      gaudi_server_label: ""

  mega-image-build:
    needs: job1
    strategy:
      matrix: ${{ fromJSON(needs.job1.outputs.run_matrix) }}
    uses: ./.github/workflows/reuse-image-build.yml
    with:
      image_tag: ${{ github.event.pull_request.head.sha }}
      mega_service: "${{ matrix.example }}"

  manifest-test:
    needs: [job1, mega-image-build]
    strategy:
      matrix: ${{ fromJSON(needs.job1.outputs.run_matrix) }}
    runs-on: ${{ matrix.hardware }}
    continue-on-error: true
    steps:
      - name: E2e test manifest
        run: |
          echo "Matrix - manifest: ${{ matrix.example }}"

      - name: Clean Up Working Directory
        run: sudo rm -rf ${{github.workspace}}/*

      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set variables
        run: |
          echo "IMAGE_REPO=${{needs.mega-image-build.outputs.image_repo}}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{needs.mega-image-build.outputs.image_tag}}" >> $GITHUB_ENV
          lower_example=$(echo "${{ matrix.example }}" | tr '[:upper:]' '[:lower:]')
          echo "NAMESPACE=$lower_example-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "ROLLOUT_TIMEOUT_SECONDS=1800s" >> $GITHUB_ENV
          echo "KUBECTL_TIMEOUT_SECONDS=60s" >> $GITHUB_ENV
          echo "should_cleanup=false" >> $GITHUB_ENV
          echo "skip_validate=true" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE"

      - name: Initialize manifest testing
        run: |
          ${{ github.workspace }}/${{ matrix.example }}/tests/test_manifest_on_xeon.sh init_${{ matrix.example }}

      - name: Kubectl install
        id: install
        run: |
          echo "should_cleanup=true" >> $GITHUB_ENV
          kubectl create ns $NAMESPACE
          ${{ github.workspace }}/${{ matrix.example }}/tests/test_manifest_on_xeon.sh install_${{ matrix.example }} $NAMESPACE
          echo "Testing ${{ matrix.example }}, waiting for pod ready..."
          if kubectl rollout status deployment --namespace "$NAMESPACE" --timeout "$ROLLOUT_TIMEOUT_SECONDS"; then
            echo "Testing manifests ${{ matrix.example }}, waiting for pod ready done!"
            echo "skip_validate=false" >> $GITHUB_ENV
          else
            echo "Timeout waiting for pods in namespace $NAMESPACE to be ready!"
            exit 1
          fi
          sleep 60

      - name: Validate e2e test
        if: always()
        run: |
          if $skip_validate; then
            echo "Skip validate"
          else
            ${{ github.workspace }}/${{ matrix.example }}/tests/test_manifest_on_xeon.sh validate_${{ matrix.example }} $NAMESPACE
          fi

      - name: Kubectl uninstall
        if: always()
        run: |
          if $should_cleanup; then
            if ! kubectl delete ns $NAMESPACE --timeout=$KUBECTL_TIMEOUT_SECONDS; then
              kubectl delete pods --namespace $NAMESPACE --force --grace-period=0 --all
              kubectl delete ns $NAMESPACE --force --grace-period=0 --timeout=$KUBECTL_TIMEOUT_SECONDS
            fi
          fi
